import socket
from threading import Thread
import struct

#finds the time in relation to Epoch time and returns a string
#I think I many not need this function
""" def findTime(timestampIn):
    delta = time.ctime(int.from_bytes(timestampIn, "big", signed = True))
    print("Timestamp: ", delta)
    return(delta)  """
#takes in information from the client and does work
def readBytes(conn: socket.socket,addr):
    with conn:
        file = conn.makefile('b') # using .makefile allows to take all the data sent by client.
        print(f"Connected by {addr}")
        historicalPD = {}
        filteredTup =[]
        while True:
            behaviorIn = file.read(1)
            firstIn = file.read(4)
            secondIn = file.read(4)
            if behaviorIn == None:
                break
            #guard clause in not I or B
            if not (behaviorIn == b'I' or behaviorIn == b'Q'):
                return
            #guard clause if first or second are empty
            if firstIn == None or secondIn == None:
                return
            #inserts into dictionary
            if behaviorIn == b'I':
                timestamp = int.from_bytes(firstIn, "big", signed = True)
                historicalPD[timestamp] = int.from_bytes(secondIn, "big", signed = True)
                continue
            #queries the dictionary and finds mean
            if behaviorIn == b'Q':
                print(historicalPD)
                sortedHistoricalPD = sorted(historicalPD.items())       
                minTime = int.from_bytes(firstIn, "big", signed = True)
                maxTime = int.from_bytes(secondIn, "big", signed = True)
                n = 0
                print(sortedHistoricalPD)
                #filters the sorted tuple list into only the values that fit between the min and max
                filteredTup = set([i for i in sortedHistoricalPD if i[0] >= minTime and i[0] <= maxTime])
                print("Filtered:", filteredTup)
                
                if filteredTup:
                    mean = int(sum(n for _, n in filteredTup) / len(filteredTup))
                else:
                    mean = 0
                    
                meanHex = hex(mean)
                
                hexFour = int.to_bytes(mean, byteorder = "big", signed = True, length = 4)
                bytes.fromhex
                print(meanHex)
                print(hexFour)
                conn.sendall(hexFour)
                continue

        return


                

def main():
    HOST = "0.0.0.0"
    PORT = 65432
    #creates a socket that supports context manager type. 
    #AF_INET internet adress for IPv4 expects two-tuple (host,port)
    #SOCK_STREAM socket type for TCP
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: 
        #.bind() method assosciates specific network interface and port number
        #s.setsockopt allows me to close and open on the same port rapidly
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((HOST,PORT))
        s.listen()
        historicalPD = {}
        while True:
            conn, addr = s.accept()
            thread = Thread(target = readBytes, args = (conn,addr))

            thread.start()
                    
if __name__ == "__main__":
    main()